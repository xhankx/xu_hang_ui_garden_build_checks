{"version":3,"file":"components-Image-Image-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAIA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAvBA;AAyBA","sources":["webpack:///./src/components/Image/Image.tsx"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { type ImageProps } from './Image.types';\r\n\r\ninterface StyledImageProps {\r\n  disabled?: boolean;\r\n  backgroundColor?: string;\r\n}\r\n\r\nconst StyledImage = styled.img<StyledImageProps>`\r\n  width: 90%;\r\n  height: auto;\r\n  cursor: ${(props) =>\r\n    props.disabled !== undefined && props.disabled ? 'not-allowed' : 'default'};\r\n  opacity: ${(props) =>\r\n    props.disabled !== undefined && props.disabled ? 0.5 : 1};\r\n  pointer-events: ${(props) =>\r\n    props.disabled !== undefined && props.disabled ? 'none' : 'auto'};\r\n  background-color: ${(props) =>\r\n    props.disabled !== undefined && props.disabled\r\n      ? '#cccccc'\r\n      : props.backgroundColor};\r\n`;\r\n\r\nconst StyledWrapper = styled.div<StyledImageProps>`\r\n  background-color: ${(props) =>\r\n    props.disabled !== undefined && props.disabled\r\n      ? '#cccccc'\r\n      : props.backgroundColor};\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst HeaderText = styled.h2`\r\n  color: #ffffff;\r\n  font-size: 20px;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst Image: React.FC<ImageProps> = ({\r\n  imageUrl,\r\n  altText,\r\n  backgroundColor,\r\n  disabled,\r\n  headerText,\r\n}) => {\r\n  return (\r\n    <StyledWrapper\r\n      backgroundColor={backgroundColor}\r\n      data-testid=\"image-wrapper\"\r\n    >\r\n      {headerText !== undefined && headerText !== '' && (\r\n        <HeaderText>{headerText}</HeaderText>\r\n      )}\r\n      <StyledImage\r\n        src={imageUrl}\r\n        alt={altText}\r\n        backgroundColor={backgroundColor}\r\n        disabled={disabled}\r\n      />\r\n    </StyledWrapper>\r\n  );\r\n};\r\n\r\nexport default Image;\r\n"],"names":[],"sourceRoot":""}